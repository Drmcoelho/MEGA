# main.py

import os
import sys
from proj_generation.scripts.code_review.openai_reviewer import analyze_code_with_gpt5
from proj_generation.scripts.code_review.gemini_reviewer import generate_code_suggestions_with_gemini

def get_pr_diff():
    """Obt√©m o diff do Pull Request.

    Em um cen√°rio real no GitHub Actions, usar√≠amos uma action como `actions/checkout`
    e depois `git diff` para obter as mudan√ßas. Para este exemplo, vamos simular
    lendo o diff de um arquivo ou de uma vari√°vel de ambiente.

    Returns:
        str: O diff do PR.
    """
    # Simula√ß√£o: O diff seria passado como um argumento de linha de comando ou lido de um arquivo.
    if len(sys.argv) > 1:
        diff_file = sys.argv[1]
        if os.path.exists(diff_file):
            with open(diff_file, 'r') as f:
                return f.read()
    
    # Fallback para um diff de exemplo se nenhum arquivo for fornecido
    print("Aviso: Nenhum arquivo de diff fornecido. Usando diff de exemplo.")
    return """
    --- a/example.py
    +++ b/example.py
    @@ -1,3 +1,4 @@
     def old_function(x):
         # Esta fun√ß√£o est√° obsoleta
-    return x * 2
+    # Nova l√≥gica mais complexa
+    return (x * 2) + 1
    """

def post_comment_to_pr(comment: str):
    """Posta um coment√°rio no Pull Request.

    Em um cen√°rio real, usar√≠amos a API do GitHub para postar o coment√°rio.
    Para este exemplo, vamos apenas imprimir o coment√°rio no console.

    Args:
        comment (str): O coment√°rio a ser postado.
    """
    print("\n--- COMENT√ÅRIO PARA O PULL REQUEST ---")
    print(comment)
    print("-------------------------------------")
    # Em um uso real:
    # github_token = os.getenv("GITHUB_TOKEN")
    # pr_number = os.getenv("PR_NUMBER")
    # repo_name = os.getenv("GITHUB_REPOSITORY")
    # ... fazer a chamada para a API do GitHub ...

def main():
    """Fun√ß√£o principal que orquestra o processo de code review duplo."""
    print("Iniciando processo de Code Review Duplo...")

    # 1. Obter o diff do PR
    print("\n[Passo 1/4] Obtendo o diff do Pull Request...")
    pr_diff = get_pr_diff()
    print("Diff obtido com sucesso.")

    # 2. An√°lise de alto n√≠vel com o GPT-5
    print("\n[Passo 2/4] Enviando para an√°lise do GPT-5 (Arquiteto S√™nior)...")
    gpt5_analysis = analyze_code_with_gpt5(pr_diff)
    print("An√°lise do GPT-5 recebida.")

    # 3. Gera√ß√£o de sugest√µes com o Gemini
    print("\n[Passo 3/4] Enviando para o Gemini (Desenvolvedor Executor) gerar sugest√µes...")
    gemini_suggestions = generate_code_suggestions_with_gemini(pr_diff, gpt5_analysis)
    print("Sugest√µes do Gemini recebidas.")

    # 4. Montar e postar o coment√°rio final
    print("\n[Passo 4/4] Montando e postando o coment√°rio final...")
    final_comment = f"""## An√°lise de Code Review (IA-Powered) ü§ñ‚ú®

Ol√°! Analisei as suas mudan√ßas com a ajuda de um time de IAs.

### An√°lise do Arquiteto S√™nior (GPT-5)

{gpt5_analysis}

---

### Sugest√µes de Implementa√ß√£o (Gemini)

{gemini_suggestions}

---

*Este coment√°rio foi gerado automaticamente. As sugest√µes devem ser revisadas por um humano.*"""
    
    post_comment_to_pr(final_comment)
    print("\nProcesso de Code Review Duplo conclu√≠do!")

if __name__ == '__main__':
    main()

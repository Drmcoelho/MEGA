name: MEGA CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Frontend Build and Test
  frontend:
    name: Frontend (Next.js)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/web
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Lint code
      run: pnpm run lint
      continue-on-error: true  # Don't fail build on lint warnings initially
      
    - name: Type check
      run: pnpm exec tsc --noEmit
      continue-on-error: true
      
    - name: Build application
      run: pnpm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: next-build
        path: apps/web/.next/
        retention-days: 7

  # Python CLI and Packages
  python-packages:
    name: Python Packages
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
        package: ['cli', 'llm-orchestrator']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build pytest black pylint
        
    - name: Install package in development mode
      working-directory: packages/${{ matrix.package }}
      run: pip install -e .
      
    - name: Lint with black
      working-directory: packages/${{ matrix.package }}
      run: black --check src/
      continue-on-error: true
      
    - name: Lint with pylint
      working-directory: packages/${{ matrix.package }}
      run: pylint src/ --disable=all --enable=E,F
      continue-on-error: true
      
    - name: Test CLI commands
      if: matrix.package == 'cli'
      run: |
        python -m mega_cli.main version
        python -m mega_cli.main ingest --help
        
    - name: Build package
      working-directory: packages/${{ matrix.package }}
      run: python -m build

  # Content Engine (Node.js)
  content-engine:
    name: Content Engine
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: packages/content-engine
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install
      
    - name: Test basic functionality
      run: node src/index.js
      continue-on-error: true

  # Content Validation
  content-validation:
    name: Content Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install validation tools
      run: |
        pip install pyyaml jsonschema
        
    - name: Validate module manifests
      run: |
        python -c "
        import yaml
        import json
        from pathlib import Path
        
        modules_dir = Path('content/modules')
        errors = []
        
        for module_dir in modules_dir.iterdir():
            if module_dir.is_dir():
                manifest_path = module_dir / 'manifest.yaml'
                if manifest_path.exists():
                    try:
                        with open(manifest_path, 'r') as f:
                            manifest = yaml.safe_load(f)
                        
                        # Basic validation
                        required_fields = ['id', 'title', 'version', 'objectives', 'estimated_time_hours']
                        for field in required_fields:
                            if field not in manifest:
                                errors.append(f'{module_dir.name}: Missing required field {field}')
                        
                        print(f'âœ“ {module_dir.name}: manifest valid')
                    except Exception as e:
                        errors.append(f'{module_dir.name}: {e}')
                else:
                    errors.append(f'{module_dir.name}: No manifest.yaml found')
        
        if errors:
            print('\\nValidation errors:')
            for error in errors:
                print(f'  - {error}')
            exit(1)
        else:
            print('\\nAll module manifests are valid!')
        "
        
    - name: Validate quiz JSON files
      run: |
        python -c "
        import json
        from pathlib import Path
        
        modules_dir = Path('content/modules')
        errors = []
        
        for quiz_file in modules_dir.rglob('*.json'):
            try:
                with open(quiz_file, 'r') as f:
                    quiz_data = json.load(f)
                
                # Basic validation
                required_fields = ['id', 'title', 'questions']
                for field in required_fields:
                    if field not in quiz_data:
                        errors.append(f'{quiz_file}: Missing required field {field}')
                
                # Validate questions
                if 'questions' in quiz_data:
                    for i, question in enumerate(quiz_data['questions']):
                        if 'question' not in question:
                            errors.append(f'{quiz_file}: Question {i+1} missing question text')
                        if 'correct_answer' not in question:
                            errors.append(f'{quiz_file}: Question {i+1} missing correct_answer')
                
                print(f'âœ“ {quiz_file.relative_to(modules_dir)}: quiz valid')
            except Exception as e:
                errors.append(f'{quiz_file}: {e}')
        
        if errors:
            print('\\nValidation errors:')
            for error in errors:
                print(f'  - {error}')
            exit(1)
        else:
            print('\\nAll quiz files are valid!')
        "

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend, python-packages, content-engine]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest
        
    - name: Install all dependencies
      run: |
        # Install frontend dependencies
        pnpm install --frozen-lockfile
        
        # Install Python packages
        pip install -e packages/cli/
        pip install -e packages/llm-orchestrator/
        
    - name: Test CLI integration
      run: |
        python -m mega_cli.main version
        python -m mega_cli.main ingest --content-path content/modules || true
        
    - name: Test frontend build with content
      working-directory: apps/web
      run: |
        # Test if Next.js can build with actual content
        pnpm run build

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true
      
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  # Deploy Preview (for PRs)
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [frontend, content-validation]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest
        
    - name: Install and build
      working-directory: apps/web
      run: |
        pnpm install --frozen-lockfile
        pnpm run build
        
    - name: Comment PR with preview info
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'ðŸš€ Preview build completed successfully! The application builds without errors and all content validation passes.'
          })

# Notifications on failure
# In production, you might want to add Slack/Discord notifications here
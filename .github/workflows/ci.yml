name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Test Python components
  test-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        pip install -r requirements-dev.txt
        
    - name: Install Python packages (editable)
      run: |
        # Install packages in editable mode for tests to work
        find packages -name "pyproject.toml" -execdir pip install -e . \;
        
    - name: Run Python tests with coverage
      run: |
        pytest packages/ --cov=packages --cov-report=xml --cov-report=html --cov-report=term-missing -v
        
    - name: Upload Python coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: python
        name: python-coverage
        
    - name: Upload Python coverage artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-coverage-${{ matrix.python-version }}
        path: htmlcov/

  # Test and build Node.js components  
  test-nodejs:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest
        
    - name: Cache Node.js dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.pnpm-store
          node_modules
        key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-
          
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Add test dependencies to web app
      run: |
        cd apps/web
        pnpm add -D jest @testing-library/react @testing-library/jest-dom jest-environment-jsdom
        
    - name: Configure Jest for web app
      run: |
        cd apps/web
        cat > jest.config.js << 'EOF'
        const nextJest = require('next/jest')
        
        const createJestConfig = nextJest({
          dir: './',
        })
        
        const customJestConfig = {
          setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
          testEnvironment: 'jest-environment-jsdom',
        }
        
        module.exports = createJestConfig(customJestConfig)
        EOF
        
        cat > jest.setup.js << 'EOF'
        import '@testing-library/jest-dom'
        EOF
        
    - name: Add test script to web app package.json
      run: |
        cd apps/web
        npm pkg set scripts.test="jest"
        
    - name: Run Node.js tests
      run: |
        cd apps/web
        pnpm test
        
    - name: Build Next.js application
      run: |
        cd apps/web
        pnpm build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: nextjs-build-${{ matrix.node-version }}
        path: apps/web/.next/

  # Lint code
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Setup Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: 20
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.pnpm-store
        key: ${{ runner.os }}-lint-${{ hashFiles('**/requirements-dev.txt', '**/pnpm-lock.yaml') }}
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort mypy
        pip install -r requirements-dev.txt
        
    - name: Install Node.js dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Run Python linting
      run: |
        echo "Running Black (code formatter)"
        black --check --diff packages/ proj_generation/ || echo "Black formatting issues found"
        
        echo "Running isort (import sorting)"  
        isort --check-only --diff packages/ proj_generation/ || echo "Import sorting issues found"
        
        echo "Running Flake8 (style guide enforcement)"
        flake8 packages/ proj_generation/ --max-line-length=88 --extend-ignore=E203,W503 || echo "Flake8 issues found"
        
    - name: Run TypeScript checking
      run: |
        cd apps/web
        npx tsc --noEmit || echo "TypeScript issues found"

  # Integration tests - run existing scripts
  integration:
    runs-on: ubuntu-latest
    needs: [test-python, test-nodejs]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Setup Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: 20
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        pip install -r requirements-dev.txt
        pnpm install --frozen-lockfile
        
    - name: Install Python packages
      run: |
        find packages -name "pyproject.toml" -execdir pip install -e . \;
        
    - name: Add test dependencies to web app
      run: |
        cd apps/web
        pnpm add -D jest @testing-library/react @testing-library/jest-dom jest-environment-jsdom
        npm pkg set scripts.test="jest --passWithNoTests"
        
    - name: Run quality script
      run: |
        chmod +x scripts/quality.sh
        ./scripts/quality.sh
        
    - name: Run all tests script
      run: |
        chmod +x scripts/run_all_tests.sh
        ./scripts/run_all_tests.sh